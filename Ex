program - 1

import java.util.Scanner;
public class  stringfunction{
  public static void main(String []args)
  {
    Scanner sc = new Scanner(System.in); 
    System.out.print("Input a first string ");
      String s1 = sc.nextLine();
    System.out.print("Input second string ");
      String s2 = sc.nextLine();
    boolean x=s1.equals(s2);
    System.out.println("Compare s1 and s2:"+x);
    System.out.println("Character at given position is:"+s1.charAt(5));
    System.out.println(s1.concat(" the author"));
    System.out.println(s1.length());
    System.out.println(s1.toLowerCase());
    System.out.println(s1.toUpperCase());
    System.out.println(s1.indexOf('a'));
    System.out.println(s1.substring(0,4));
    System.out.println(s1.substring(4));  
  }
}


program - 2

class student 
{
    String name;
    String dept;
    int age;
    public student(String name, String dept, int age) 
{
        this.name = name;
        this.dept = dept;
        this.age = age;
    }
    public void displayDetails() 
{
        System.out.println("Name: " + name);
        System.out.println("Department: " + dept);
        System.out.println("Age: " + age);
    }
    public void greetings() {
        System.out.println(" Hello " + name );
    }}
public class Main {
    public static void main(String[ ] args) 
{
        student  stu1 = new student("ravi”,"cs",101);
        student stu2 = new  student("ram","IT", 102);
System.out.println("\n Details of Student 1:");
        stu1.displayDetails();
        stu1.greetings();

        System.out.println("\n Details of Student 2:");
        stu2.displayDetails();
        stu2.greetings();
    }
}


program - 3

public class Calculator 
{
    public Calculator() 
{
        System.out.println("Default Calculator created.");
    }
    public Calculator(String type) 
    {
        System.out.println(type + " Calculator created.");
    }
    public Calculator(String type, int version) 
{
        System.out.println(type + " Calculator version " + version + " created.");
    }

    public int add(int a, int b) 
    {
        System.out.println("Adding two integers:");
        return a + b;
    }
    public int add(int a, int b, int c) 
    {
        System.out.println("Adding three integers:");
        return a + b + c;
    }

    public static void main(String[] args) 
   {
    System.out.println("\n--- Demonstrating Constructor Overloading ---");
    System.out.println("\n=======================================");
        Calculator calc1 = new Calculator(); 
        Calculator calc2 = new Calculator("Scientific"); 
        Calculator calc3 = new Calculator("Financial", 2); 

        System.out.println("\n--- Demonstrating Method Overloading ---");
       System.out.println("\n=======================================");
        Calculator  arith = new Calculator(); 
        System.out.println("Sum of 5 and 10: " + arith.add(5, 10));
        System.out.println("Sum of 5, 10, and 15: " + arith.add(5, 10, 15));
        
    }
}


program - 4

class student {
    void display() {
        System.out.println("BASE CLASS");
    }
}
class stud1 extends student {
    void display() {
        System.out.println("SINGLE INHERITANCE- WELCOME STUD1");
    }
}
class stud2 extends stud1 {
    void display() {
        System.out.println("MULTILEVEL INHERITANCE-WELCOME STUD2");
    }
}

class stud3 extends student {
    void display() {
        System.out.println("HIERARCHIAL INHERITANCE-WELCOME STUD3");
    }
}
public class InheritanceDemo {
    public static void main(String[] args) {
        stud1 obj1 = new stud1();
        obj1.display();  
        stud2 obj2 = new stud2();
        obj2.display();  
        stud3 obj3 = new stud3();
        obj3.display();  
         student obj = new student();
        obj.display();  }}



program - 5

// Define interface
interface EmployeeDetails {
    void showDetails();       // To display employee data
    void calculateSalary();   // To calculate salary
}

// Implementing class
class Employee implements EmployeeDetails {
    String name;
    int empId;
    double basicSalary;
    double hra, da, totalSalary;

    // Constructor to initialize employee data
    Employee(String name, int empId, double basicSalary) {
        this.name = name;
        this.empId = empId;
        this.basicSalary = basicSalary;
    }

    // Method to show employee details
    public void showDetails() {
        System.out.println("\n--- Employee Details ---");
        System.out.println("Employee ID   : " + empId);
        System.out.println("Employee Name : " + name);
        System.out.println("Basic Salary  : ₹" + basicSalary);
    }

    // Method to calculate and display salary
    public void calculateSalary() {
        hra = 0.20 * basicSalary;  // HRA = 20%
        da = 0.10 * basicSalary;   // DA = 10%
        totalSalary = basicSalary + hra + da;

        System.out.println("\n--- Salary Breakdown ---");
        System.out.println("HRA (20%)     : ₹" + hra);
        System.out.println("DA (10%)      : ₹" + da);
        System.out.println("Total Salary  : ₹" + totalSalary);
    }
}

// Main class to test
public class EmployeeInterfaceDemo {
    public static void main(String[] args) {
        // Create Employee object
        Employee emp = new Employee("John Doe", 101, 30000);

        // Call interface methods
        emp.showDetails();
        emp.calculateSalary();
    }
}



program - 6


class MyRunnable implements Runnable{

public void run(){

for(int i=1;i<=5;i++){

System.out.println(Thread.currentThread().getName()+"-Value:"+i);

try

{

Thread.sleep(500);

}

catch (InterruptedException e)

{}

This is the reason

public class Runnable Example

{

public static void main(String[] args)

{

Runnable R=new MyRunnable();

Thread t1=new Thread(R);

Thread t2=new Thread(R);

t1.start();

t2.start();

}

}



program - 7 

import java.io.*;

public class ExceptionDemo {

public static void main(String[] args) {
System.out.println("----- Java Exception Handling Demo	");


// 1. NullPointerException try {
String str = null;
System.out.println("Length of the string: " + str.length());

} catch (NullPointerException e) {
System.out.println("Caught NullPointerException: " + e.getMessage());
}

// 2. ArithmeticException try {
int a = 10, b = 0; int result = a / b;
System.out.println("Result: " + result);
} catch (ArithmeticException e) {
System.out.println("Caught ArithmeticException: " + e.getMessage());
}

// 3. IOException try {
BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); System.out.print("Enter your name: ");
String name = reader.readLine(); // This may throw IOException System.out.println("Hello, " + name + "!");
} catch (IOException e) {
System.out.println("Caught IOException: " + e.getMessage());
}

// 4. ArrayIndexOutOfBoundsException try {
int[] arr = {1, 2, 3};
System.out.println("Accessing 5th element: " + arr[4]);
} catch (ArrayIndexOutOfBoundsException e) {
System.out.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
}
System.out.println("----- Program Execution Completed	");
}
}


program - 8 (A) 

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class LoginForm extends JFrame implements ActionListener {
    JTextField tfUsername;
    JPasswordField pfPassword;
    JButton btnLogin;

    public LoginForm() {
        setTitle("Login Form");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(3, 2, 5, 5));

        // Labels and Fields
        add(new JLabel("Username:"));
        tfUsername = new JTextField();
        add(tfUsername);

        add(new JLabel("Password:"));
        pfPassword = new JPasswordField();
        add(pfPassword);
        btnLogin = new JButton("Login");
        btnLogin.addActionListener(this);
        add(btnLogin);

        setLocationRelativeTo(null); // Center window
        setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        String username = tfUsername.getText();
        String password = new String(pfPassword.getPassword());

        // Hardcoded credentials
        if (username.equals("admin") && password.equals("1234")) {
            JOptionPane.showMessageDialog(this, "Login Successful!");
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Username or Password");
        }
    }

    public static void main(String[] args) {
        new LoginForm();
    }
}


program - 8 (B)


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ValidationForm extends JFrame implements ActionListener {
    JTextField tfName, tfEmail;
    JButton btnSubmit;

    public ValidationForm() {
        setTitle("Form Validation");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(3, 2, 5, 5));

        add(new JLabel("Name:"));
        tfName = new JTextField();
        add(tfName);

        add(new JLabel("Email:"));
        tfEmail = new JTextField();
        add(tfEmail);

        btnSubmit = new JButton("Submit");
        btnSubmit.addActionListener(this);
        add(btnSubmit);

        setLocationRelativeTo(null);
        setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        String name = tfName.getText().trim();
        String email = tfEmail.getText().trim();

        if (name.isEmpty() || email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required!", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Form Submitted Successfully!");
        }
    }

    public static void main(String[] args) {
        new ValidationForm();
    }
}



program - 9


import java.util.Random;
import java.util.Scanner;
public class DnaSequenceGenerator {
    // Define possible nucleotides in a DNA sequence
private static final char[] NUCLEOTIDES = {'A', 'T', 'C', 'G'};
    // Generate a random DNA sequence of the given length
public static String generateDnaSequence(int length) {
        Random random = new Random();
        StringBuilder dna = new StringBuilder();
        for (int i = 0; i < length; i++) {
            char nucleotide = NUCLEOTIDES[random.nextInt(NUCLEOTIDES.length)];
            dna.append(nucleotide);
        }
        return dna.toString();
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the length of the DNA sequence to generate: ");
        int length = scanner.nextInt();
        if (length <= 0) {
            System.out.println("Invalid input. Please enter a positive integer.");
        } else {
            String dnaSequence = generateDnaSequence(length);
            System.out.println("Generated DNA Sequence: " + dnaSequence);
        }
        scanner.close();
    }
}



program - 10

import java.util.Random;
import java.util.Scanner;
public class ProteinSequenceGenerator {
    // 20 standard amino acids represented by their single-letter codes
    private static final char[] AMINO_ACIDS = {
        'A', 'R', 'N', 'D', 'C',
        'E', 'Q', 'G', 'H', 'I',
        'L', 'K', 'M', 'F', 'P',
        'S', 'T', 'W', 'Y', 'V'
    };
    // Function to generate a random protein sequence
    public static String generateProteinSequence(int length) {
        Random random = new Random();
        StringBuilder protein = new StringBuilder();
        for (int i = 0; i < length; i++) {
            char aminoAcid = AMINO_ACIDS[random.nextInt(AMINO_ACIDS.length)];
            protein.append(aminoAcid);
        }
        return protein.toString();
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the length of the protein sequence to generate: ");
        int length = scanner.nextInt();
        if (length <= 0) {
            System.out.println("Invalid input. Please enter a positive integer.");
        } else {
            String proteinSequence = generateProteinSequence(length);
            System.out.println("Generated Protein Sequence: " + proteinSequence);
        }
        scanner.close();
    }}


